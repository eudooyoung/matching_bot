pipeline {
    agent any
    // parameters {
    //     string(name: 'DB_ENDPOINT', defaultValue: '', description: '데이터베이스 엔드포인트')
    //     string(name: 'DB_NAME', defaultValue: '', description: '데이터베이스 이름')
    //     string(name: 'DB_PASSWORD', defaultValue: '', description: '데이터베이스 비밀번호')
    //     string(name: 'DB_USERNAME', defaultValue: '', description: '데이터베이스 사용자명')

    //      }
    environment {
        AWS_REGION = 'us-east-2'
        AWS_ACCOUNT_ID = '118320467932'
        ECR_REPO_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/docker_repo"
        IMAGE_NAME = 'matchingbotapp'
        IMAGE_TAG = 'latest'
        AWS_CREDENTIAL_NAME = 'aws_credentials'
        DEPLOY_HOST = '18.223.234.101' //젠킨스 퍼블릭 아이피
        JWT_SECRET = credentials('JWT_SECRET')
        JWT_ISSUER = credentials('JWT_ISSUER')
        DB_PROD_URL = credentials('DB_PROD_URL')
        DB_PROD_USER = credentials('DB_PROD_USER')
        DB_PROD_PASSWORD = credentials('DB_PROD_PASSWORD')
        AWS_ACCESS_KEY = credentials('AWS_ACCESS_KEY')
        AWS_SECRET_KEY = credentials('AWS_SECRET_KEY')
        OD_CLOUD_KEY = credentials('OD_CLOUD_KEY')
        OPENAI_API_KEY = credentials('OPENAI_API_KEY')

        SPRING_PROFILES_ACTIVE = 'prod'

    }
    stages {
          stage('Checkout') {
            steps {
                git branch: 'deploy',
                url: 'https://github.com/eudooyoung/matching_bot.git',
                credentialsId: 'github_token'
            }
        }
        stage('Prepare application.yml') {
            steps {
                script {


                    // application.yml 치환
                    sh '''
                        sed -i "s#\\\${DB_PROD_URL}#${DB_PROD_URL}#g" $WORKSPACE/src/main/resources/application.yml
                        sed -i "s#\\\${DB_PROD_USER}#${DB_PROD_USER}#g" $WORKSPACE/src/main/resources/application.yml
                        sed -i "s#\\\${DB_PROD_PASSWORD}#${DB_PROD_PASSWORD}#g" $WORKSPACE/src/main/resources/application.yml
                        sed -i "s#\\\${JWT_SECRET}#${JWT_SECRET}#g" $WORKSPACE/src/main/resources/application.yml
                        sed -i "s#\\\${JWT_ISSUER}#${JWT_ISSUER}#g" $WORKSPACE/src/main/resources/application.yml
                        sed -i "s#\\\${AWS_ACCESS_KEY}#${AWS_ACCESS_KEY}#g" $WORKSPACE/src/main/resources/application.yml
                        sed -i "s#\\\${AWS_SECRET_KEY}#${AWS_SECRET_KEY}#g" $WORKSPACE/src/main/resources/application.yml
                        sed -i "s#\\\${OD_CLOUD_KEY}#${OD_CLOUD_KEY}#g" $WORKSPACE/src/main/resources/application.yml
                        sed -i "s#\\\${OPENAI_API_KEY}#${OPENAI_API_KEY}#g" $WORKSPACE/src/main/resources/application.yml


                    '''
                }
            }
        }
       stage('Build Application') {
            steps {
                sh '''
                    chmod +x gradlew
                    ./gradlew clean build -x test || true
                '''
                echo 'Build completed successfully.'
            }
            //  ./gradlew clean build -x test || true  //테스트무시할떄

        }
        stage('Clean old Docker resources (local)') {
            steps {
                sh '''
                    docker stop ${IMAGE_NAME} || true
                    docker rm ${IMAGE_NAME} || true
                    docker rmi ${IMAGE_NAME}:${BUILD_NUMBER} || true
                '''
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    //젠킨스에서 기본적으로 제공되는 환경변수
                    sh """
                        docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} .
                        docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${ECR_REPO_URI}:${BUILD_NUMBER}
                    """
                }
            }
            post {
                success {
                    echo 'Docker Build succeeded.'
                }
                failure {
                    error 'Docker Build failed.' // exit pipeline
                }
            }
        }

        stage('AWS ECR Login'){
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_credentials']]) {

                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                }
            }
        }

        stage('ECR Push') {
            steps {
                script {
                    // Docker 이미지 태그 및 푸시
                    sh """
                        docker push ${ECR_REPO_URI}:${BUILD_NUMBER}
                    """
                }
            }
             post {
                success {
                    echo 'Image upload to ECR succeeded.'
                }
                failure {
                    error 'Image upload to ECR failed.'
                }
            }
        }

        stage('Deploy to AWS EC2 VM') {
            steps {
                //셸 에이전트 사용
                sshagent(credentials: ['deploy-ssh-key']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@${DEPLOY_HOST} '
                            set -x
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com &&
                            docker pull ${ECR_REPO_URI}:${BUILD_NUMBER} &&
                            docker stop ${IMAGE_NAME} || true &&
                            docker rm ${IMAGE_NAME} || true &&
                            docker run -d -p 80:8091 --name ${IMAGE_NAME} ${ECR_REPO_URI}:${BUILD_NUMBER}
                        '
                    """
                }
            }
            post {
                success {
                    echo 'Application successfully deployed to EC2.'
                }
                failure {
                    error 'Application deployment to EC2 failed.'
                }
            }
        }
       stage('Clean old ECR images') {
           steps {
               withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_credentials']]) {
                   script {
                       sh '''
                           echo '🧹 ECR 이미지 정리 (최신 2개 유지)'

                           aws ecr list-images \
                               --region "$AWS_REGION" \
                               --repository-name docker_repo \
                               --query 'imageIds[*].imageTag' \
                               --output text | tr '\\t' '\\n' | sort -n | head -n -2 > old_tags.txt

                           if [ -s old_tags.txt ]; then
                               echo "🗑 삭제할 태그:"
                               cat old_tags.txt

                               TAGS_TO_DELETE=$(cat old_tags.txt | sed 's/^/imageTag=/' | paste -sd ' ' -)

                               aws ecr batch-delete-image \
                                   --region "$AWS_REGION" \
                                   --repository-name docker_repo \
                                   --image-ids $TAGS_TO_DELETE || true
                           else
                               echo "✅ 삭제할 이미지 없음 (2개 이하 존재)"
                           fi
                       '''
                   }
               }
           }
       }

    }
}